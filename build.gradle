plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.72"
    id "org.jetbrains.kotlin.kapt" version "1.3.72"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.72"
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'jacoco'
    id "application"
}

version "0.1"
group "de.serverfrog.froglib"

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

    implementation("io.github.config4k:config4k:0.4.2")
    implementation("no.tornado:tornadofx:1.7.20")
    implementation 'org.junit.jupiter:junit-jupiter:5.4.2'

    compile("org.jetbrains.exposed:exposed-core:0.24.1")
    compile("org.jetbrains.exposed:exposed-dao:0.24.1")
    compile("org.jetbrains.exposed:exposed-jdbc:0.24.1")

    implementation("com.h2database:h2:1.4.200")

    testImplementation('org.junit.jupiter:junit-jupiter:5.6.2')
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.6.2")
}

test.classpath += configurations.developmentOnly

mainClassName = "de.serverfrog.froglib.ui.MainApp"

// use JUnit 5 platform
test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

java {
    sourceCompatibility = JavaVersion.toVersion('11')
}
javafx {
    version = "11.0.2"
    modules = ['javafx.controls', 'javafx.graphics']
}

allOpen {
}
compileKotlin {
    kotlinOptions {
        jvmTarget = '11'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = '11'
        javaParameters = true
    }
}
kapt {
    arguments {
    }
}

shadowJar {
    mergeServiceFiles()
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/reports/jacoco/")
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    jacocoTestReport
    subprojects*.jacocoTestReport
    subprojects*.test
}